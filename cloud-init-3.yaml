#cloud-config

packages:
  - bridge-utils
  - git
  - net-tools
  - apt-transport-https 
  - ca-certificates 
  - curl 
  - gnupg

write_files:
  - path: /etc/systemd/system/vxlan-mesh.service
    content: |
      [Unit]
      Description=VXLAN Mesh Agent Service
      After=network.target

      [Service]
      Type=simple
      ExecStart=/usr/bin/python3 /home/ubuntu/vxlan-mesh/vxlan-mesh-agent.py -p cp-3 -i 10.10.10.3/24 -n enp0s1
      Restart=on-failure

      [Install]
      WantedBy=multi-user.target

runcmd:
  # Add Kubernetes APT repository and install Kubernetes components
  - curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /usr/share/keyrings/kubernetes-archive-keyring.gpg
  - echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list
  # Update package list and install kubelet, kubeadm, and kubectl
  - apt-get update && apt-get install -y kubelet kubeadm kubectl
  - apt-mark hold kubelet kubeadm kubectl
  # Clone the desired repository
  - git clone https://github.com/antongisli/vxlan-mesh.git /home/ubuntu/vxlan-mesh
  - chown -R ubuntu:ubuntu /home/ubuntu/vxlan-mesh
  # Setup kubeadm bash completion for the 'ubuntu' user
  - sudo -H -u ubuntu bash -c 'mkdir -p /home/ubuntu/.kube'
  - sudo -H -u ubuntu bash -c 'kubeadm completion bash > /home/ubuntu/.kube/kubeadm_completion.bash'
  - echo 'source /home/ubuntu/.kube/kubeadm_completion.bash' >> /home/ubuntu/.bashrc
  - |
    cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
    overlay
    br_netfilter
    EOF

    sudo modprobe overlay
    sudo modprobe br_netfilter

    # sysctl params required by setup, params persist across reboots
    cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
    net.bridge.bridge-nf-call-iptables  = 1
    net.bridge.bridge-nf-call-ip6tables = 1
    net.ipv4.ip_forward                 = 1
    EOF

    # Apply sysctl params without reboot
    sudo sysctl --system
  # Setup containerd
  - |
    # Add Docker's official GPG key:
    sudo install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    sudo chmod a+r /etc/apt/keyrings/docker.gpg

    # Add the repository to Apt sources:
    echo \
      "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
      "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
      sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt-get update
    sudo apt install containerd.io
    sed -i 's/^disabled_plugins = \["cri"\]/# disabled_plugins = ["cri"]/g' /etc/containerd/config.toml
    sudo containerd config default > /etc/containerd/config.toml
    sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
    sudo systemctl restart containerd

  # kubeadm completion
  # Create the .kube directory and generate the kubeadm completion script
  - mkdir -p /home/ubuntu/.kube
  - /usr/bin/kubeadm completion bash > /home/ubuntu/.kube/kubeadm_completion.bash.inc

  # Append the kubeadm completion sourcing to .bashrc
  - echo "\n# Kubeadm shell completion" >> /home/ubuntu/.bashrc
  - echo "source '/home/ubuntu/.kube/kubeadm_completion.bash.inc'" >> /home/ubuntu/.bashrc

  # Fix permissions on the .kube directory
  - chown -R ubuntu:ubuntu /home/ubuntu/.kube

  # Reload the systemctl daemon to recognize the new service
  - systemctl daemon-reload
  # Enable the service to start on boot
  - systemctl enable vxlan-mesh.service
  # Start the service
  - systemctl start vxlan-mesh.service

  # install flannel
  - curl https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
  #- kubectl apply -f kube-flannel.yml


final_message: "The system is finally up, after $UPTIME seconds"
# starting vxlan sudo python3 vxlan-mesh-agent.py -p cp-1 -i 10.10.10.1/24 -n enp0s1

#CP-1
#sudo kubeadm init --pod-network-cidr 10.244.0.0/16 --control-plane-endpoint cluster-endpoint.home --apiserver-advertise-address=10.10.10.1

#debugging and troubleshooting
#sudo crictl --runtime-endpoint unix:///var/run/containerd/containerd.sock ps --all

#flannel
#https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml

#sudo containerd config default > /etc/containerd/config.toml
#sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
#sudo systemctl restart containerd
#
